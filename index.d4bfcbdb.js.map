{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","src/modules/helpers.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nvar $6585a3d639dc70cc$exports = {};\n\"use strict\";\nfunction $6585a3d639dc70cc$var$getRandomIndex(num) {\n    return Math.floor(Math.random() * num);\n}\nfunction $6585a3d639dc70cc$var$createFreeNumber(min, max) {\n    return Math.random() < 0.9 ? min : max;\n}\n$6585a3d639dc70cc$exports = {\n    getRandomIndex: $6585a3d639dc70cc$var$getRandomIndex,\n    createFreeNumber: $6585a3d639dc70cc$var$createFreeNumber\n};\n\n\nvar $a5fd07fa01589658$require$getRandomIndex = $6585a3d639dc70cc$exports.getRandomIndex;\nvar $a5fd07fa01589658$require$createFreeNumber = $6585a3d639dc70cc$exports.createFreeNumber;\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState){\n        this.state = [];\n        if (initialState) this.state = initialState;\n        else for(let i = 0; i < 4; i++)this.state.push(new Array(4).fill(0));\n        this.status = \"idle\";\n        this.score = 0;\n        this.initialState = JSON.parse(JSON.stringify(this.state));\n    }\n    getState() {\n        return this.state;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    static getFreeCells(state) {\n        const freeCells = [];\n        for(let i = 0; i < state.length; i++){\n            const row = state[i];\n            if (row.some((el)=>el === 0)) {\n                for(let j = 0; j < row.length; j++)if (row[j] === 0) freeCells.push([\n                    i,\n                    j\n                ]);\n            }\n        }\n        return freeCells;\n    }\n    static fillRandomCell(state) {\n        const freeCells = $a5fd07fa01589658$var$Game.getFreeCells(state);\n        const freeCellsLength = freeCells.length;\n        if (freeCellsLength === 0) return;\n        const [row, column] = freeCells[$a5fd07fa01589658$require$getRandomIndex(freeCellsLength)];\n        state[row][column] = $a5fd07fa01589658$require$createFreeNumber(2, 4);\n    }\n    static moveFilledCellsRight(state) {\n        state.forEach((row, ind)=>{\n            const filledCells = row.filter((x)=>x !== 0);\n            const emptyCells = Array(row.length - filledCells.length).fill(0);\n            state[ind] = emptyCells.concat(filledCells);\n        });\n    }\n    static moveFilledCellsLeft(state) {\n        state.forEach((row, ind)=>{\n            const filledCells = row.filter((x)=>x !== 0);\n            const emptyCells = Array(row.length - filledCells.length).fill(0);\n            state[ind] = filledCells.concat(emptyCells);\n        });\n    }\n    static moveFilledCellsDown(state) {\n        for(let i = 0; i < state.length; i++){\n            const stackFilled = [];\n            const stackEmpty = [];\n            for(let j = 0; j < state[i].length; j++)if (state[j][i] === 0) stackEmpty.push(state[j][i]);\n            else stackFilled.push(state[j][i]);\n            const fullStack = stackEmpty.concat(stackFilled);\n            if (stackEmpty.length) for(let j = 0; j < state[i].length; j++)state[j][i] = fullStack[j];\n        }\n    }\n    static moveFilledCellsUp(state) {\n        for(let i = 0; i < state.length; i++){\n            const stackFilled = [];\n            const stackEmpty = [];\n            for(let j = 0; j < state[i].length; j++)if (state[j][i] === 0) stackEmpty.push(state[j][i]);\n            else stackFilled.push(state[j][i]);\n            const fullStack = stackFilled.concat(stackEmpty);\n            if (stackEmpty.length) for(let j = 0; j < state[i].length; j++)state[j][i] = fullStack[j];\n        }\n    }\n    static canMove(state) {\n        for(let i = 0; i < state.length; i++){\n            const row = state[i];\n            for(let j = 0; j < row.length - 1; j++){\n                if (row[j] === row[j + 1]) return true;\n                if (state[j][i] === state[j + 1][i]) return true;\n            }\n        }\n        return false;\n    }\n    static isstateChanged(prevState, newstate) {\n        let isChanged = false;\n        prevState.forEach((row, rowInd)=>{\n            const equal = row.every((val, valInd)=>newstate[rowInd][valInd] === val);\n            if (!equal) isChanged = true;\n        });\n        return isChanged;\n    }\n    static checkStatus(game) {\n        const state = game.state;\n        state.forEach((row)=>{\n            if (row.some((el)=>el === 2048)) game.status = \"win\";\n        });\n        const freeCells = $a5fd07fa01589658$var$Game.getFreeCells(state);\n        if (!$a5fd07fa01589658$var$Game.canMove(state) && freeCells.length === 0) game.status = \"lose\";\n    }\n    static checkAfterMove(game, prevState, state) {\n        if ($a5fd07fa01589658$var$Game.isstateChanged(prevState, state)) $a5fd07fa01589658$var$Game.fillRandomCell(state);\n        $a5fd07fa01589658$var$Game.checkStatus(game);\n    }\n    start() {\n        this.status = \"playing\";\n        for(let i = 0; i < 2; i++)$a5fd07fa01589658$var$Game.fillRandomCell(this.state);\n    }\n    restart() {\n        this.state = JSON.parse(JSON.stringify(this.initialState));\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        const state = this.state;\n        const prevState = JSON.parse(JSON.stringify(state));\n        $a5fd07fa01589658$var$Game.moveFilledCellsRight(state);\n        for(let i = 0; i < state.length; i++){\n            const row = state[i];\n            for(let j = row.length - 1; j > 0; j--)if (row[j] === row[j - 1] && row[j] !== 0) {\n                row[j - 1] = 0;\n                row[j] *= 2;\n                this.score += row[j];\n            }\n        }\n        $a5fd07fa01589658$var$Game.moveFilledCellsRight(state);\n        $a5fd07fa01589658$var$Game.checkAfterMove(this, prevState, state);\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        const state = this.state;\n        const prevState = JSON.parse(JSON.stringify(state));\n        $a5fd07fa01589658$var$Game.moveFilledCellsLeft(state);\n        for(let i = 0; i < state.length; i++){\n            const row = state[i];\n            for(let j = 0; j < row.length - 1; j++)if (row[j] === row[j + 1] && row[j] !== 0) {\n                row[j] *= 2;\n                row[j + 1] = 0;\n                this.score += row[j];\n            }\n        }\n        $a5fd07fa01589658$var$Game.moveFilledCellsLeft(state);\n        $a5fd07fa01589658$var$Game.checkAfterMove(this, prevState, state);\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        const state = this.state;\n        const prevState = JSON.parse(JSON.stringify(state));\n        $a5fd07fa01589658$var$Game.moveFilledCellsDown(state);\n        for(let i = 0; i < state.length; i++){\n            for(let j = state[i].length - 1; j > 0; j--)if (state[j][i] === state[j - 1][i] && state[j][i] !== 0) {\n                state[j][i] *= 2;\n                state[j - 1][i] = 0;\n                this.score += state[j][i];\n            }\n        }\n        $a5fd07fa01589658$var$Game.moveFilledCellsDown(state);\n        $a5fd07fa01589658$var$Game.checkAfterMove(this, prevState, state);\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        const state = this.state;\n        const prevState = JSON.parse(JSON.stringify(state));\n        $a5fd07fa01589658$var$Game.moveFilledCellsUp(state);\n        for(let i = 0; i < state.length; i++){\n            for(let j = 0; j < state[i].length - 1; j++)if (state[j][i] === state[j + 1][i] && state[j][i] !== 0) {\n                state[j][i] *= 2;\n                state[j + 1][i] = 0;\n                this.score += state[j][i];\n            }\n        }\n        $a5fd07fa01589658$var$Game.moveFilledCellsUp(state);\n        $a5fd07fa01589658$var$Game.checkAfterMove(this, prevState, state);\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$playBtn = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$msgStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$msgWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$msgLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$playground = new $a5fd07fa01589658$exports();\n$09e991522ca7e64e$var$updateTableStyles();\nconst $09e991522ca7e64e$var$keyDownHandler = (e)=>{\n    switch(e.code){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$playground.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$playground.moveRight();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$playground.moveDown();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$playground.moveUp();\n            break;\n        default:\n            return;\n    }\n    $09e991522ca7e64e$var$updateStyles();\n};\nfunction $09e991522ca7e64e$var$updateButtonText(button) {\n    button.textContent = button.classList.contains(\"start\") ? \"Start\" : \"Restart\";\n}\nfunction $09e991522ca7e64e$var$toggleButtonClasses(button) {\n    button.classList.toggle(\"start\");\n    button.classList.toggle(\"restart\");\n    $09e991522ca7e64e$var$updateButtonText(button);\n}\n$09e991522ca7e64e$var$playBtn.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$playBtn.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$startGame();\n        $09e991522ca7e64e$var$msgStart.classList.add(\"hidden\");\n        document.addEventListener(\"keydown\", $09e991522ca7e64e$var$keyDownHandler);\n    } else {\n        $09e991522ca7e64e$var$restartGame();\n        $09e991522ca7e64e$var$msgStart.classList.remove(\"hidden\");\n        document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$keyDownHandler);\n    }\n    $09e991522ca7e64e$var$toggleButtonClasses($09e991522ca7e64e$var$playBtn);\n});\nfunction $09e991522ca7e64e$var$updateTableStyles() {\n    const table = document.querySelector(\".game-field\");\n    const tableRows = table.rows;\n    const state = $09e991522ca7e64e$var$playground.state;\n    for(let i = 0; i < state.length; i++){\n        const gridRow = state[i];\n        for(let j = 0; j < gridRow.length; j++)if (!gridRow[j]) {\n            tableRows[i].cells[j].textContent = \"\";\n            tableRows[i].cells[j].className = \"field-cell\";\n        } else {\n            const tableTd = tableRows[i].cells[j];\n            const gridValue = gridRow[j];\n            tableTd.textContent = gridValue;\n            tableTd.className = `field-cell field-cell--${gridValue}`;\n        }\n    }\n}\nfunction $09e991522ca7e64e$var$updateMessageStyles() {\n    switch($09e991522ca7e64e$var$playground.status){\n        case \"win\":\n            $09e991522ca7e64e$var$msgWin.classList.remove(\"hidden\");\n            document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$keyDownHandler);\n            break;\n        case \"lose\":\n            $09e991522ca7e64e$var$msgLose.classList.remove(\"hidden\");\n            break;\n        default:\n            $09e991522ca7e64e$var$msgLose.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$msgWin.classList.add(\"hidden\");\n    }\n}\nfunction $09e991522ca7e64e$var$updateScoreStyles() {\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$playground.score;\n}\nfunction $09e991522ca7e64e$var$updateStyles() {\n    $09e991522ca7e64e$var$updateTableStyles();\n    $09e991522ca7e64e$var$updateScoreStyles();\n    $09e991522ca7e64e$var$updateMessageStyles();\n}\nfunction $09e991522ca7e64e$var$startGame() {\n    $09e991522ca7e64e$var$playground.start();\n    $09e991522ca7e64e$var$updateStyles();\n}\nfunction $09e991522ca7e64e$var$restartGame() {\n    $09e991522ca7e64e$var$playground.restart();\n    $09e991522ca7e64e$var$updateStyles();\n}\n\n\n//# sourceMappingURL=index.d4bfcbdb.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\n\nconst playBtn = document.querySelector('.button');\nconst msgStart = document.querySelector('.message-start');\nconst msgWin = document.querySelector('.message-win');\nconst msgLose = document.querySelector('.message-lose');\nconst gameScore = document.querySelector('.game-score');\nconst playground = new Game();\n\nupdateTableStyles();\n\nconst keyDownHandler = (e) => {\n  switch (e.code) {\n    case 'ArrowLeft':\n      playground.moveLeft();\n      break;\n\n    case 'ArrowRight':\n      playground.moveRight();\n      break;\n\n    case 'ArrowDown':\n      playground.moveDown();\n      break;\n\n    case 'ArrowUp':\n      playground.moveUp();\n      break;\n\n    default:\n      return;\n  }\n\n  updateStyles();\n};\n\nfunction updateButtonText(button) {\n  button.textContent = button.classList.contains('start') ? 'Start' : 'Restart';\n}\n\nfunction toggleButtonClasses(button) {\n  button.classList.toggle('start');\n  button.classList.toggle('restart');\n\n  updateButtonText(button);\n}\n\nplayBtn.addEventListener('click', () => {\n  if (playBtn.classList.contains('start')) {\n    startGame();\n\n    msgStart.classList.add('hidden');\n\n    document.addEventListener('keydown', keyDownHandler);\n  } else {\n    restartGame();\n\n    msgStart.classList.remove('hidden');\n\n    document.removeEventListener('keydown', keyDownHandler);\n  }\n\n  toggleButtonClasses(playBtn);\n});\n\nfunction updateTableStyles() {\n  const table = document.querySelector('.game-field');\n  const tableRows = table.rows;\n\n  const state = playground.state;\n\n  for (let i = 0; i < state.length; i++) {\n    const gridRow = state[i];\n\n    for (let j = 0; j < gridRow.length; j++) {\n      if (!gridRow[j]) {\n        tableRows[i].cells[j].textContent = '';\n        tableRows[i].cells[j].className = 'field-cell';\n      } else {\n        const tableTd = tableRows[i].cells[j];\n        const gridValue = gridRow[j];\n\n        tableTd.textContent = gridValue;\n        tableTd.className = `field-cell field-cell--${gridValue}`;\n      }\n    }\n  }\n}\n\nfunction updateMessageStyles() {\n  switch (playground.status) {\n    case 'win':\n      msgWin.classList.remove('hidden');\n      document.removeEventListener('keydown', keyDownHandler);\n      break;\n\n    case 'lose':\n      msgLose.classList.remove('hidden');\n      break;\n\n    default:\n      msgLose.classList.add('hidden');\n      msgWin.classList.add('hidden');\n  }\n}\n\nfunction updateScoreStyles() {\n  gameScore.textContent = playground.score;\n}\n\nfunction updateStyles() {\n  updateTableStyles();\n  updateScoreStyles();\n  updateMessageStyles();\n}\n\nfunction startGame() {\n  playground.start();\n  updateStyles();\n}\n\nfunction restartGame() {\n  playground.restart();\n  updateStyles();\n}\n","'use strict';\n\nconst { getRandomIndex, createFreeNumber } = require('./helpers');\n\nclass Game {\n  constructor(initialState) {\n    this.state = [];\n\n    if (initialState) {\n      this.state = initialState;\n    } else {\n      for (let i = 0; i < 4; i++) {\n        this.state.push(new Array(4).fill(0));\n      }\n    }\n\n    this.status = 'idle';\n    this.score = 0;\n    this.initialState = JSON.parse(JSON.stringify(this.state));\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  static getFreeCells(state) {\n    const freeCells = [];\n\n    for (let i = 0; i < state.length; i++) {\n      const row = state[i];\n\n      if (row.some((el) => el === 0)) {\n        for (let j = 0; j < row.length; j++) {\n          if (row[j] === 0) {\n            freeCells.push([i, j]);\n          }\n        }\n      }\n    }\n\n    return freeCells;\n  }\n\n  static fillRandomCell(state) {\n    const freeCells = Game.getFreeCells(state);\n    const freeCellsLength = freeCells.length;\n\n    if (freeCellsLength === 0) {\n      return;\n    }\n\n    const [row, column] = freeCells[getRandomIndex(freeCellsLength)];\n\n    state[row][column] = createFreeNumber(2, 4);\n  }\n\n  static moveFilledCellsRight(state) {\n    state.forEach((row, ind) => {\n      const filledCells = row.filter((x) => x !== 0);\n\n      const emptyCells = Array(row.length - filledCells.length).fill(0);\n\n      state[ind] = emptyCells.concat(filledCells);\n    });\n  }\n\n  static moveFilledCellsLeft(state) {\n    state.forEach((row, ind) => {\n      const filledCells = row.filter((x) => x !== 0);\n\n      const emptyCells = Array(row.length - filledCells.length).fill(0);\n\n      state[ind] = filledCells.concat(emptyCells);\n    });\n  }\n\n  static moveFilledCellsDown(state) {\n    for (let i = 0; i < state.length; i++) {\n      const stackFilled = [];\n      const stackEmpty = [];\n\n      for (let j = 0; j < state[i].length; j++) {\n        if (state[j][i] === 0) {\n          stackEmpty.push(state[j][i]);\n        } else {\n          stackFilled.push(state[j][i]);\n        }\n      }\n\n      const fullStack = stackEmpty.concat(stackFilled);\n\n      if (stackEmpty.length) {\n        for (let j = 0; j < state[i].length; j++) {\n          state[j][i] = fullStack[j];\n        }\n      }\n    }\n  }\n\n  static moveFilledCellsUp(state) {\n    for (let i = 0; i < state.length; i++) {\n      const stackFilled = [];\n      const stackEmpty = [];\n\n      for (let j = 0; j < state[i].length; j++) {\n        if (state[j][i] === 0) {\n          stackEmpty.push(state[j][i]);\n        } else {\n          stackFilled.push(state[j][i]);\n        }\n      }\n\n      const fullStack = stackFilled.concat(stackEmpty);\n\n      if (stackEmpty.length) {\n        for (let j = 0; j < state[i].length; j++) {\n          state[j][i] = fullStack[j];\n        }\n      }\n    }\n  }\n\n  static canMove(state) {\n    for (let i = 0; i < state.length; i++) {\n      const row = state[i];\n\n      for (let j = 0; j < row.length - 1; j++) {\n        if (row[j] === row[j + 1]) {\n          return true;\n        }\n\n        if (state[j][i] === state[j + 1][i]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  static isstateChanged(prevState, newstate) {\n    let isChanged = false;\n\n    prevState.forEach((row, rowInd) => {\n      const equal = row.every(\n        (val, valInd) => newstate[rowInd][valInd] === val,\n      );\n\n      if (!equal) {\n        isChanged = true;\n      }\n    });\n\n    return isChanged;\n  }\n\n  static checkStatus(game) {\n    const state = game.state;\n\n    state.forEach((row) => {\n      if (row.some((el) => el === 2048)) {\n        game.status = 'win';\n      }\n    });\n\n    const freeCells = Game.getFreeCells(state);\n\n    if (!Game.canMove(state) && freeCells.length === 0) {\n      game.status = 'lose';\n    }\n  }\n\n  static checkAfterMove(game, prevState, state) {\n    if (Game.isstateChanged(prevState, state)) {\n      Game.fillRandomCell(state);\n    }\n\n    Game.checkStatus(game);\n  }\n\n  start() {\n    this.status = 'playing';\n\n    for (let i = 0; i < 2; i++) {\n      Game.fillRandomCell(this.state);\n    }\n  }\n\n  restart() {\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const state = this.state;\n    const prevState = JSON.parse(JSON.stringify(state));\n\n    Game.moveFilledCellsRight(state);\n\n    for (let i = 0; i < state.length; i++) {\n      const row = state[i];\n\n      for (let j = row.length - 1; j > 0; j--) {\n        if (row[j] === row[j - 1] && row[j] !== 0) {\n          row[j - 1] = 0;\n          row[j] *= 2;\n\n          this.score += row[j];\n        }\n      }\n    }\n\n    Game.moveFilledCellsRight(state);\n    Game.checkAfterMove(this, prevState, state);\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const state = this.state;\n    const prevState = JSON.parse(JSON.stringify(state));\n\n    Game.moveFilledCellsLeft(state);\n\n    for (let i = 0; i < state.length; i++) {\n      const row = state[i];\n\n      for (let j = 0; j < row.length - 1; j++) {\n        if (row[j] === row[j + 1] && row[j] !== 0) {\n          row[j] *= 2;\n          row[j + 1] = 0;\n\n          this.score += row[j];\n        }\n      }\n    }\n\n    Game.moveFilledCellsLeft(state);\n    Game.checkAfterMove(this, prevState, state);\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const state = this.state;\n    const prevState = JSON.parse(JSON.stringify(state));\n\n    Game.moveFilledCellsDown(state);\n\n    for (let i = 0; i < state.length; i++) {\n      for (let j = state[i].length - 1; j > 0; j--) {\n        if (state[j][i] === state[j - 1][i] && state[j][i] !== 0) {\n          state[j][i] *= 2;\n          state[j - 1][i] = 0;\n\n          this.score += state[j][i];\n        }\n      }\n    }\n\n    Game.moveFilledCellsDown(state);\n    Game.checkAfterMove(this, prevState, state);\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const state = this.state;\n    const prevState = JSON.parse(JSON.stringify(state));\n\n    Game.moveFilledCellsUp(state);\n\n    for (let i = 0; i < state.length; i++) {\n      for (let j = 0; j < state[i].length - 1; j++) {\n        if (state[j][i] === state[j + 1][i] && state[j][i] !== 0) {\n          state[j][i] *= 2;\n          state[j + 1][i] = 0;\n\n          this.score += state[j][i];\n        }\n      }\n    }\n\n    Game.moveFilledCellsUp(state);\n    Game.checkAfterMove(this, prevState, state);\n  }\n}\n\nmodule.exports = Game;\n","'use strict';\n\nfunction getRandomIndex(num) {\n  return Math.floor(Math.random() * num);\n}\n\nfunction createFreeNumber(min, max) {\n  return Math.random() < 0.9 ? min : max;\n}\n\nmodule.exports = {\n  getRandomIndex,\n  createFreeNumber,\n};\n"],"names":["$a5fd07fa01589658$exports","$6585a3d639dc70cc$exports","$a5fd07fa01589658$require$getRandomIndex","getRandomIndex","num","Math","floor","random","createFreeNumber","min","max","$a5fd07fa01589658$require$createFreeNumber","$a5fd07fa01589658$var$Game","constructor","initialState","state","i","push","fill","status","score","JSON","parse","stringify","getState","getScore","getStatus","getFreeCells","freeCells","length","row","some","el","j","fillRandomCell","freeCellsLength","column","moveFilledCellsRight","forEach","ind","filledCells","filter","x","emptyCells","Array","concat","moveFilledCellsLeft","moveFilledCellsDown","stackFilled","stackEmpty","fullStack","moveFilledCellsUp","canMove","isstateChanged","prevState","newstate","isChanged","rowInd","every","val","valInd","checkStatus","game","checkAfterMove","start","restart","moveRight","moveLeft","moveDown","moveUp","$09e991522ca7e64e$var$playBtn","document","querySelector","$09e991522ca7e64e$var$msgStart","$09e991522ca7e64e$var$msgWin","$09e991522ca7e64e$var$msgLose","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$playground","$09e991522ca7e64e$var$updateTableStyles","$09e991522ca7e64e$var$keyDownHandler","e","code","$09e991522ca7e64e$var$updateStyles","tableRows","table","rows","gridRow","tableTd","cells","gridValue","textContent","className","$09e991522ca7e64e$var$updateMessageStyles","classList","remove","removeEventListener","add","addEventListener","contains","button","toggle"],"version":3,"file":"index.d4bfcbdb.js.map"}